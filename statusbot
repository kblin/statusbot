#!/usr/bin/env python

import sys
import ConfigParser
from os import path
from twython import Twython

CONFIGFILE = "~/.statusbotrc"

USAGE = """Usage: %s <command>

Available commands are:
    auth: Authenticate with Twitter
    home: Get the user's timeline (home page)
    list: List authenticated users
    post: Post a tweet to Twitter
    set : Set the default user
"""

headers = {'User-Agent': 'StatusBot Tweeter'}

def load_config(filelist=None):
    "Load config from list of config files"
    if filelist is None:
        filelist = [path.expanduser(CONFIGFILE)]

    config = ConfigParser.ConfigParser()
    config.read(filelist)

    return config

def write_config(config, filename=None):
    "Write configuration to configfile"
    if filename is None:
        filename = path.expanduser(CONFIGFILE)

    with open(filename, 'w') as configfile:
        config.write(configfile)

def list_users(config):
    "List authenticated users"
    user = config.get('global', 'user')
    for section in config.sections():
        if section == "global":
            continue
        elif section == user:
            print "%s (default)" % section
        else:
            print section

def post(config, message):
    "Post a status to Twitter"
    user = config.get('global', 'user')
    consumer_key = config.get('global', 'consumer_key')
    consumer_secret = config.get('global', 'consumer_secret')

    oauth_token = config.get(user, 'oauth_token')
    oauth_token_secret = config.get(user, 'oauth_token_secret')

    twitter = Twython(twitter_token  = consumer_key,
                      twitter_secret = consumer_secret,
                      oauth_token = oauth_token,
                      oauth_token_secret = oauth_token_secret,
                      headers = headers
                      )

    twitter.updateStatus(status = message)

def auth(config):
    "Authenticate a user"
    consumer_key = config.get('global', 'consumer_key')
    consumer_secret = config.get('global', 'consumer_secret')

    twitter = Twython(twitter_token  = consumer_key,
                      twitter_secret = consumer_secret,
                      headers = headers)

    auth_props = twitter.get_authentication_tokens()
    print "Please go to %r to confirm the auth, then press return." % \
            auth_props['auth_url']
    raw_input()

    twitter = Twython(twitter_token  = consumer_key,
                      twitter_secret = consumer_secret,
                      oauth_token = auth_props['oauth_token'],
                      oauth_token_secret = auth_props['oauth_token_secret'],
                      headers = headers)

    auth_tokens = twitter.get_authorized_tokens()

    config.add_section(auth_tokens['screen_name'])
    config.set(auth_tokens['screen_name'], 'oauth_token',
               auth_tokens['oauth_token'])
    config.set(auth_tokens['screen_name'], 'oauth_token_secret',
               auth_tokens['oauth_token_secret'])
    write_config(config)

def set_default_user(config, user):
    "Set the default user"
    if not config.has_section(user):
        print "No authenticated user %s"
        return

    config.set('global', 'user', user)
    write_config(config)

def home(config):
    "Get user's tweets"
    user = config.get('global', 'user')
    consumer_key = config.get('global', 'consumer_key')
    consumer_secret = config.get('global', 'consumer_secret')

    oauth_token = config.get(user, 'oauth_token')
    oauth_token_secret = config.get(user, 'oauth_token_secret')

    twitter = Twython(twitter_token  = consumer_key,
                      twitter_secret = consumer_secret,
                      oauth_token = oauth_token,
                      oauth_token_secret = oauth_token_secret,
                      headers = headers)

    tweets = twitter.getUserTimeline(screen_name=user)
    for tweet in tweets:
        print "%s: %s" % (tweet['user']['screen_name'], tweet['text'])

def main():
    """Run the statusbot program"""
    if len(sys.argv) < 2:
        print >>sys.stderr, USAGE % sys.argv[0]
        sys.exit(1)

    config = load_config()
    command = sys.argv[1].lower()

    if command == "auth":
        auth(config)
    elif command == "post":
        message = " ".join(sys.argv[2:])
        if len(message) > 140:
            print >>sys.stderr, "Message too long, can send %r" % message[:141]
            sys.exit(1)
        post(config, message)
    elif command == "list":
        list_users(config)
    elif command == "set":
        set_default_user(config, sys.argv[2])
    elif command == "home":
        home(config)
    else:
        print >>sys.stderr, USAGE % sys.argv[0]
        sys.exit(1)

if __name__ == "__main__":
    main()
